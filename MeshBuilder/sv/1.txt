--@include ../../Object/sh/2.txt
--@include ../../Hooks/sh/1.txt

local NewType = require("../../Object/sh/2.txt")
local Hooks = require("../../Hooks/sh/1.txt")


local Packages = {}
local ClientsInitialized = {}
local MeshBuilder = NewType()

function MeshBuilder:Initialize(url, isCompressed)
    self.url = url
    if Packages[url] == nil then
        Packages[url] = {isCompressed, {}}
    end
end
local function sendMesh(url, isCompressed, holo, name, clients)
    net.start("NewMesh")
    net.writeString(url)
    net.writeBool(isCompressed)
    net.writeEntity(holo)
    net.writeString(name)
    net.send(clients, true)
end
function MeshBuilder:Build(pos,ang,scale,name)
    
    local holo = hologram.create(pos,ang, "models/items/boxbuckshot.mdl", scale)

    Packages[self.url][2][holo] = name

    for player, b in pairs(ClientsInitialized) do
        print(self.url)
        print(Packages[self.url])
        print(Packages[self.url][1])
        sendMesh(self.url, Packages[self.url][1], holo, name, player)
    end
    return holo
end
function MeshBuilder:BuildComponent(parent, pos, ang, scale, name, material, color, amount)
    local function buildObject(_name)
        local holo = self:Build(parent:localToWorld(pos), parent:localToWorldAngles(ang), scale, _name)
        holo:setParent(parent)
        holo:setMaterial(material or "phoenix_storms/Fender_white")
        holo:setColor(color or Color(255,255,255))
        return holo
    end
    if amount == 1 or nil then
        return buildObject(name)
    elseif amount>1 then
        local holos = {}
        for i = 1, amount do
            holos[i] = buildObject(name.."_"..i)
        end
        return holos
    end
end
Hooks.On("ClientInitialized", function(client)

    ClientsInitialized[client] = true

    for url, data in pairs(Packages) do
        for holo,name in pairs(data[2]) do
            sendMesh(url, data[1], holo, name, client)
        end
    end
end)

Hooks.On("PlayerDisconnected", function(client)
    ClientsInitialized[client] = nil
end)
return MeshBuilder