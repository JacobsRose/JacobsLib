--@owneronly
--@client
--@include ../../Async/sh/2.txt
--@include ../../Hooks/sh/1.txt
--@include ../../Download/sh/1.txt
--@include ../../NextTick/sh/1.txt

local Async = require("../../Async/sh/2.txt")
local Hooks = require("../../Hooks/sh/1.txt")
local Download = require("../../Download/sh/1.txt")
local NextTick = require("../../NextTick/sh/1.txt")

local ParseObj = Async(function (callback, obj)

    local resume = coroutine.wrap(function()
        return mesh.parseObj(obj, true)
    end)
    
    local function onTick()

        while(cpuTotalAverage() < cpuMax() * 0.70) do
            local result = resume()
            if result ~= nil then
                Hooks.Off("tick", onTick)
                callback(result)
                break
            end
        end
    end

    Hooks.On("tick", onTick)

end)
local TableToMesh = Async(function (callback, tbl)

    local resume = coroutine.wrap(function()
        return mesh.createFromTable(tbl, true)
    end)
    
    local function onTick()

        while(cpuTotalAverage() < cpuMax() * 0.70) do
            local result = resume()
            if result ~= nil and not isnumber(result) then
                Hooks.Off("tick", onTick)
                callback(result)
                break
            end
        end
    end

    Hooks.On("tick", onTick)

end)
local Write = Async(function(callback, _table)

    file.write("binarized.txt", "")

    local File = file.open("binarized.txt", "w")
    local resume = coroutine.wrap(function()
        for name, verts in pairs(_table) do
            File:writeByte(#name)
            File:write(name)
            for i, vert in pairs(verts) do
                local normal = vert["normal"]
                local pos = vert["pos"]
                File:writeFloat(normal[1])
                File:writeFloat(normal[2])
                File:writeFloat(normal[3])
                File:writeFloat(pos[1])
                File:writeFloat(pos[2])
                File:writeFloat(pos[3])
                coroutine.yield()
            end
        end
        File:close()
        return true
    end)
    local function onTick()

        while(cpuTotalAverage() < cpuMax() * 0.70) do
            local result = resume()
            if result ~= nil then
                Hooks.Off("tick", onTick)
                callback()
                break
            end
        end
    end

    Hooks.On("tick", onTick)
    
end)
local Binarize = Async(function(callback)
    local file = Download("https://github.com/Gmod-Creations/Mazda-6/raw/main/compressed1.txt")()
    NextTick()()
    local obj = bit.decompress(file)
    file = nil
    local MeshesTable = ParseObj(obj)()
    NextTick()()
    Write(MeshesTable)()
    
    --[[
    for k,v in pairs(MeshesTable["body_body_1"]) do
        print("____________________________")
        print("k = "..tostring(k).." v = "..tostring(v))
        for k1, v1 in pairs(v) do
            print("k1 = "..tostring(k1).." v1 = "..tostring(v1))
            
        end
        for k2, userdata in pairs(v["userdata"]) do
            print("k2 = "..tostring(k2).." userdata = "..tostring(userdata))
        end
    end
    ]]
    --[[
    local meshes = {}
    for name, t in pairs(MeshesTable) do
        meshes[name] = TableToMesh(t)()
        print(name, meshes[name])
    end
    NextTick()()
    for name,m in pairs(meshes) do
        local holo = hologram.create(chip():localToWorld(Vector(0)), Angle(0), "models/props_c17/furnitureStove001a.mdl", Vector(40))
        holo:setParent(chip())
        holo:setMesh(m)
        holo:setMaterial("models/debug/debugwhite")
        holo:setColor(Color(255,255,255,255))
    end
    ]]
    callback()
end)
Binarize()