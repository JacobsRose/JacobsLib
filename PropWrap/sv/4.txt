--@name libs/jacobs/PropWrap/sv/4.txt
--@include ../../Object/sh/2.txt
--@include ../../EntityWrap/sv/1.txt
--@include ../../Timer/sh/1.txt
--@include ../../Async/sh/2.txt

local NewType = require("../../Object/sh/2.txt")
local EntityWrap = require("../../EntityWrap/sv/1.txt")
local Timer = require("../../Timer/sh/1.txt")
local Async = require("../../Async/sh/2.txt")

local PropWrap = NewType(EntityWrap)

local queue
local timer
PropWrap.generate = Async(function(callback, func)
        
    if queue ~= nil then
        table.insert(queue, {func,callback})
    elseif prop.canSpawn() then
        callback(func())
    else
        
        queue = {}

        table.insert(queue, {func,callback})

        timer = Timer:new(1/prop.spawnRate(), 0, function()
            local i, pair = next(queue)
            if prop.canSpawn() then
                pair[2](pair[1]())
                queue[i] = nil
            end
            
            if table.count(queue) == 0 then 
                queue = nil
                timer:Remove()
                timer = nil
            end
        end)
    end
end)
function PropWrap:setMass(m)
    self.e:setMass(m)
end
return PropWrap
